"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3700],{6203:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var a=t(3159),n=t(15);const s={},o="Parameters",i={id:"ref/Querying/parameters",title:"Parameters",description:"Queries often need to be parameterized based on user input and Verse provides a simple, intuitive and type-safe way",source:"@site/docs/ref/03-Querying/02-parameters.mdx",sourceDirName:"ref/03-Querying",slug:"/ref/Querying/parameters",permalink:"/docs/ref/Querying/parameters",draft:!1,unlisted:!1,editUrl:"https://github.com/operativa-dev/verse/edit/main/apps/docs",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"refSidebar",previous:{title:"Operators",permalink:"/docs/ref/Querying/operators"},next:{title:"Compiled Queries",permalink:"/docs/ref/Querying/compiled-queries"}},d={},u=[{value:"Sub-queries and the <code>from</code> parameter",id:"sub-queries-and-the-from-parameter",level:2}];function c(e){const r={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.h1,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsx)(r.p,{children:"Queries often need to be parameterized based on user input and Verse provides a simple, intuitive and type-safe way\nto do this, building upon our use of arrow function expressions in query operators."}),"\n",(0,a.jsx)(r.p,{children:"Put simply, any query operator that takes an arrow function expression can also take parameters. These parameters are\ndefined as additional arguments to the arrow function expression, and are used in the same way as any other argument.\nParameter values are passed to the query operator after the arrow function expression."}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:parameterized showLineNumbers",children:'const artist = "Audioslave"; // usually from user input\n\nconst parameterized = await db.from.artists\n  .where((a, $artist) => a.name === $artist, artist)\n  .single();\n'})}),"\n",(0,a.jsxs)(r.p,{children:["In the example above, the ",(0,a.jsx)(r.code,{children:"where"})," operator takes an arrow function expression with an additional parameter ",(0,a.jsx)(r.code,{children:"$artist"}),".\nA value for this parameter is then passed to the query operator as the second argument, after the arrow function expression.\nThis pattern should be familiar to anyone who has used a printf-style format function in other languages."]}),"\n",(0,a.jsx)(r.admonition,{type:"note",children:(0,a.jsxs)(r.p,{children:["The ",(0,a.jsx)(r.code,{children:"$"})," prefix on the parameter name is not required, but is a common convention to make it clear that the value is a parameter."]})}),"\n",(0,a.jsx)(r.p,{children:"When a query takes parameters, Verse will create SQL query parameters to ensure that the parameter values are correctly\nescaped and quoted, and to prevent SQL injection attacks. Additionally, Verse will used prepared statements when available\nto ensure that the query can be efficiently executed multiple times with different parameter values."}),"\n",(0,a.jsxs)(r.p,{children:["Verse offers a second way to pass parameters to a query, ",(0,a.jsx)(r.a,{href:"./compiled-queries",children:(0,a.jsx)(r.em,{children:"Compiled Queries"})}),", which we will cover in a later section."]}),"\n",(0,a.jsxs)(r.h2,{id:"sub-queries-and-the-from-parameter",children:["Sub-queries and the ",(0,a.jsx)(r.code,{children:"from"})," parameter"]}),"\n",(0,a.jsxs)(r.p,{children:["In the previous examples, we have used the ",(0,a.jsx)(r.code,{children:"from"})," property of the ",(0,a.jsx)(r.code,{children:"db"})," object to start a query. This works well when\nwe are querying at the top level, but what if we want to perform a sub-query, for example to filter or join data from\na related table?"]}),"\n",(0,a.jsxs)(r.p,{children:["In this case, we can use a ",(0,a.jsx)(r.code,{children:"from"})," parameter to easily create a sub-query. The ",(0,a.jsx)(r.code,{children:"from"})," parameter is a special parameter\nthat can optionally be passed as the last parameter to an arrow function expression, and is used to start a new query."]}),"\n",(0,a.jsx)(r.p,{children:"For example, the following query finds all artists who have more than a certain number of albums:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:from-parameter showLineNumbers",children:"const amount = 3; // usually from user input\n\nconst albums = await db.from.artists\n  .where(\n    (ar, $count, from) =>\n      from.albums.where(al => ar.artistId === al.artistId).count() > $count,\n    amount\n  )\n  .toArray();\n"})}),"\n",(0,a.jsx)(r.admonition,{type:"note",children:(0,a.jsx)(r.p,{children:'The parameter does not have to be called "from", but is a common convention to make it clear that the value is a sub-query.'})}),"\n",(0,a.jsxs)(r.p,{children:["As mentioned above, Verse also supports ",(0,a.jsx)(r.a,{href:"./compiled-queries",children:(0,a.jsx)(r.em,{children:"Compiled Queries"})})," as a way to pass parameters to a query. With compiled queries,\nsub-queries can be created in an even more natural way, and we will cover this in a later section."]})]})}function l(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},15:(e,r,t)=>{t.d(r,{R:()=>o,x:()=>i});var a=t(1855);const n={},s=a.createContext(n);function o(e){const r=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),a.createElement(s.Provider,{value:r},e.children)}}}]);