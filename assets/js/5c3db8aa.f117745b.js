"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5118],{4427:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>d,toc:()=>u});var s=n(3159),a=n(6374),r=n(4993),o=n(9357);const i={},l="Getting Started",d={id:"ref/Tutorials/getting-started",title:"Getting Started",description:"Let's get started with the basics of Verse by creating a simple todo list application that uses a SQLite database.",source:"@site/docs/ref/01-Tutorials/getting-started.mdx",sourceDirName:"ref/01-Tutorials",slug:"/ref/Tutorials/getting-started",permalink:"/verse/docs/ref/Tutorials/getting-started",draft:!1,unlisted:!1,editUrl:"https://github.com/operativa-dev/verse/edit/main/apps/docs",tags:[],version:"current",frontMatter:{},sidebar:"refSidebar",previous:{title:"Installation",permalink:"/verse/docs/ref/installation"},next:{title:"Introduction",permalink:"/verse/docs/ref/Configuration/intro"}},c={},u=[];function h(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"getting-started",children:"Getting Started"}),"\n",(0,s.jsx)(t.p,{children:"Let's get started with the basics of Verse by creating a simple todo list application that uses a SQLite database."}),"\n",(0,s.jsxs)(t.p,{children:["Verse supports different databases using separate packages. For this example, we will use the ",(0,s.jsx)(t.code,{children:"@operativa/verse-sqlite"})," package. Create a new directory for your project and install the package:"]}),"\n",(0,s.jsxs)(r.A,{groupId:"npm2yarn",children:[(0,s.jsx)(o.A,{value:"npm",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"npm install @operativa/verse @operativa/verse-sqlite\n"})})}),(0,s.jsx)(o.A,{value:"yarn",label:"Yarn",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"yarn add @operativa/verse @operativa/verse-sqlite\n"})})}),(0,s.jsx)(o.A,{value:"pnpm",label:"pnpm",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"pnpm add @operativa/verse @operativa/verse-sqlite\n"})})})]}),"\n",(0,s.jsxs)(t.p,{children:["Now, create a new file called ",(0,s.jsx)(t.code,{children:"index.ts"})," and add the following code:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"include ./apps/snippets/src/basic.ts:1-20 showLineNumbers",children:'import { verse } from "@operativa/verse";\nimport { sqlite } from "@operativa/verse-sqlite";\nimport { boolean, entity, int, string } from "@operativa/verse/model/builder";\nimport { PrettyConsoleLogger } from "@operativa/verse/utils/logging";\n\n// Define a simple entity to represent a Todo item.\n\nconst Todo = entity(\n  {\n    id: int(),\n    title: string(),\n    completed: boolean(),\n  },\n  builder => {\n    builder.data(\n      { title: "Do the dishes", completed: false },\n      { title: "Walk the dog", completed: false }\n    );\n  }\n);\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Here, we have created a simple ",(0,s.jsx)(t.code,{children:"Todo"})," class with a ",(0,s.jsx)(t.code,{children:"title"})," and ",(0,s.jsx)(t.code,{children:"completed"})," property. We marked the ",(0,s.jsx)(t.code,{children:"id"})," property as ",(0,s.jsx)(t.code,{children:"readonly"})," to indicate that it is an identifier and should not be modified - Verse will take care of managing the identifier for us."]}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["In Verse, entities can also be classes. You can do this by passing a class constructor to the ",(0,s.jsx)(t.code,{children:"entity"})," function. This is useful when you want to define methods and other behavior on your entities."]})}),"\n",(0,s.jsxs)(t.p,{children:["Next, we will configure Verse, define our model and add some seed data. Add the following code to the ",(0,s.jsx)(t.code,{children:"index.ts"})," file:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"include ./apps/snippets/src/basic.ts:22-34 showLineNumbers",children:'// Setup our Verse instance.\n\nconst db = verse({\n  config: {\n    driver: sqlite("todos.sqlite"),\n    logger: new PrettyConsoleLogger(),\n  },\n  model: {\n    entities: {\n      todos: Todo,\n    },\n  },\n});\n'})}),"\n",(0,s.jsxs)(t.p,{children:["This code configures Verse to use the ",(0,s.jsx)(t.code,{children:"@operativa/verse-sqlite"})," package as the database driver and sets up a simple model with a single entity labelled ",(0,s.jsx)(t.code,{children:"todos"})," (labels are used to refer to entities in queries and other operations). Verse uses a simple builder pattern to define the model, which makes it easy to define rich models in a natural way, all in pure TypeScript. We also added seed data to the ",(0,s.jsx)(t.code,{children:"todos"})," entity using the ",(0,s.jsx)(t.code,{children:"data"})," method on the ",(0,s.jsx)(t.code,{children:"builder"})," passed to an optional configuration function."]}),"\n",(0,s.jsxs)(t.p,{children:["Now, we need to create the ",(0,s.jsx)(t.code,{children:"todo.sqlite"})," database schema we configured above. Add the following:"]}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"ts",label:"Typescript",default:!0,children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"include ./apps/snippets/src/basic.ts:38-38 showLineNumbers",children:"await db.database.recreate();\n"})})}),(0,s.jsx)(o.A,{value:"sql",label:"Console Log",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:' \u26a1\ufe0f Executing SQL: Parameters: []\n    1| create table "Todo" (\n    2|   "Id" integer not null,\n    3|   "Title" varchar(255) not null,\n    4|   "Completed" boolean not null,\n    5|   primary key ("Id")\n    6| )\n  \u26a1\ufe0f Executing SQL: Parameters: [$1=\'Do the dishes\', $2=0]\n     1| insert into "Todo" ("Title", "Completed") values (?, ?) returning "Id"\n  \u26a1\ufe0f Executing SQL: Parameters: [$1=\'Walk the dog\', $2=0]\n     1| insert into "Todo" ("Title", "Completed") values (?, ?) returning "Id"\n'})})})]}),"\n",(0,s.jsxs)(t.p,{children:["This will create the database file and the necessary tables for our model, and also insert the seed data we defined earlier. The ",(0,s.jsx)(t.code,{children:"recreate"})," method is a convenience method that drops the database if it exists and then creates it again. It is useful for development and testing purposes."]}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:"This is a simple way to create the database schema for our model. In a real-world application, you would typically use Verse's migration system to manage the database schema."})}),"\n",(0,s.jsxs)(t.p,{children:["Next, we will write our first query to retrieve all the todos from the database. Add the following code to the ",(0,s.jsx)(t.code,{children:"index.ts"})," file:"]}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"ts",label:"Typescript",default:!0,children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"include ./apps/snippets/src/basic.ts:50-54 showLineNumbers",children:'const query = db.from.todos.where(todo => todo.title.like("%dog%"));\n\nfor await (const todo of query) {\n  console.log(`${todo.id}: ${todo.title} (completed: ${todo.completed})`);\n}\n'})})}),(0,s.jsx)(o.A,{value:"out",label:"Output",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"1: Do the dishes (completed: false)\n2: Walk the dog (completed: false)\n"})})}),(0,s.jsx)(o.A,{value:"sql",label:"Console Log",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:' \u26a1\ufe0f Executing SQL: Parameters: []\n    1| select "t0"."Id", "t0"."Title", "t0"."Completed"\n    2| from "Todo" as "t0"\n \ud83e\udded Query executed in: 0.99ms\n'})})})]}),"\n",(0,s.jsxs)(t.p,{children:["Verse provides a simple and powerful query API that allows you to write queries in a natural way using TypeScript. The ",(0,s.jsx)(t.code,{children:"from"})," property is used to specify the entity to query, and the ",(0,s.jsx)(t.code,{children:"toArray"})," method is used to execute the query and return the results as an array. We then iterate over the results and log the todos to the console."]}),"\n",(0,s.jsx)(t.p,{children:'We can also write more complex queries using the query API. For example, let\'s write a query to retrieve only todos that mention "dog" in the title:'}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"ts",label:"Typescript",default:!0,children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"include ./apps/snippets/src/basic.ts:50-54 showLineNumbers",children:'const query = db.from.todos.where(todo => todo.title.like("%dog%"));\n\nfor await (const todo of query) {\n  console.log(`${todo.id}: ${todo.title} (completed: ${todo.completed})`);\n}\n'})})}),(0,s.jsx)(o.A,{value:"out",label:"Output",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"2: Walk the dog (completed: false)\n"})})}),(0,s.jsx)(o.A,{value:"sql",label:"Console Log",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:' \u26a1\ufe0f Executing SQL: Parameters: []\n    1| select "t1"."Id", "t1"."Title", "t1"."Completed"\n    2| from "Todo" as "t1"\n    3| where "t1"."Title" like \'%dog%\'\n'})})})]}),"\n",(0,s.jsxs)(t.p,{children:["Observe that in this case, instead of using the ",(0,s.jsx)(t.code,{children:"toArray"})," method, we used a ",(0,s.jsx)(t.code,{children:"for await"})," loop to iterate over the results. This is because the query API supports asynchronous iteration, which allows you to efficiently process result sets without loading the entire result set into memory."]}),"\n",(0,s.jsxs)(t.p,{children:["Verse supports a wide range of query operations, including filtering, sorting, grouping, and aggregation. You can also write custom SQL queries if you need to. See the ",(0,s.jsx)(t.a,{href:"/docs/api/query/queryable/classes/AsyncQueryable",children:"Query API"})," documentation for more information."]}),"\n",(0,s.jsx)(t.p,{children:"Now let's see how easy it is to modify data using Verse. For example, let's mark the \"Do the dishes\" todo as completed:"}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"ts",label:"Typescript",default:!0,children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"include ./apps/snippets/src/basic.ts:56-66 showLineNumbers",children:'// Modify a todo and save the changes.\n\nconst uow = db.uow();\n\nconst todo = await uow.todos\n  .where(todo => todo.title === "Do the dishes")\n  .single();\n\ntodo.completed = true;\n\nawait uow.commit();\n'})})}),(0,s.jsx)(o.A,{value:"sql",label:"Console Log",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:' \ud83e\udded Query executed in: 0.87ms\n \u26a1\ufe0f Executing SQL: Parameters: []\n    1| select "t2"."Id", "t2"."Title", "t2"."Completed"\n    2| from (\n    3|    select "t1"."Id", "t1"."Title", "t1"."Completed"\n    4|    from "Todo" as "t1"\n    5|    where "t1"."Title" = \'Do the dishes\'\n    6| ) as "t2"\n    7| limit 2\n \ud83e\udded Query executed in: 1.03ms\n \u26a1\ufe0f Executing SQL: Parameters: [$1=\'Do the dishes\', $2=1, $3=1]\n    1| update "Todo" set "Title" = ?, "Completed" = ? where "Id" = ?\n \ud83e\udded Commit executed in: 0.63ms\n'})})})]}),"\n",(0,s.jsxs)(t.p,{children:["Verse uses a ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Unit_of_work",children:"Unit of Work (UoW)"})," pattern to manage updates to the database. The ",(0,s.jsx)(t.code,{children:"uow"})," method is used to create a new unit of work, and the ",(0,s.jsx)(t.code,{children:"commit"})," method is used to save any changes to the database. The UoW pattern is a powerful way to manage database updates in a transactional way, allowing you to focus on your business logic."]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},9357:(e,t,n)=>{n.d(t,{A:()=>o});n(1855);var s=n(1038);const a={tabItem:"tabItem_ez0V"};var r=n(3159);function o(e){let{children:t,hidden:n,className:o}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.A)(a.tabItem,o),hidden:n,children:t})}},4993:(e,t,n)=>{n.d(t,{A:()=>w});var s=n(1855),a=n(1038),r=n(9591),o=n(3178),i=n(863),l=n(6312),d=n(4569),c=n(7451);function u(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,s.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:s,default:a}}=e;return{value:t,label:n,attributes:s,default:a}}))}(n);return function(e){const t=(0,d.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.W6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(r),(0,s.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=h(e),[o,l]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const s=n.find((e=>e.default))??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:t,tabValues:r}))),[d,u]=m({queryString:n,groupId:a}),[f,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,c.Dv)(n);return[a,(0,s.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:a}),b=(()=>{const e=d??f;return p({value:e,tabValues:r})?e:null})();(0,i.A)((()=>{b&&l(b)}),[b]);return{selectedValue:o,selectValue:(0,s.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)}),[u,g,r]),tabValues:r}}var g=n(3949);const b={tabList:"tabList_b7YG",tabItem:"tabItem_Aq5S"};var x=n(3159);function v(e){let{className:t,block:n,selectedValue:s,selectValue:o,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,r.a_)(),c=e=>{const t=e.currentTarget,n=l.indexOf(t),a=i[n].value;a!==s&&(d(t),o(a))},u=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:r}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,ref:e=>l.push(e),onKeyDown:u,onClick:c,...r,className:(0,a.A)("tabs__item",b.tabItem,r?.className,{"tabs__item--active":s===t}),children:n??t},t)}))})}function j(e){let{lazy:t,children:n,selectedValue:a}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:r.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==a})))})}function y(e){const t=f(e);return(0,x.jsxs)("div",{className:(0,a.A)("tabs-container",b.tabList),children:[(0,x.jsx)(v,{...e,...t}),(0,x.jsx)(j,{...e,...t})]})}function w(e){const t=(0,g.A)();return(0,x.jsx)(y,{...e,children:u(e.children)},String(t))}},6374:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var s=n(1855);const a={},r=s.createContext(a);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);