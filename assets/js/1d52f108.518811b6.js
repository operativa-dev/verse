"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1170],{1783:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var r=n(3159),a=n(8740);const t={},i="Operators",o={id:"ref/Querying/operators",title:"Operators",description:"Verse provides many query operators to help you write sophisticated queries. This section will describe",source:"@site/docs/ref/03-Querying/01-operators.mdx",sourceDirName:"ref/03-Querying",slug:"/ref/Querying/operators",permalink:"/docs/ref/Querying/operators",draft:!1,unlisted:!1,editUrl:"https://github.com/operativa-dev/verse/edit/main/apps/docs",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"refSidebar",previous:{title:"Overview",permalink:"/docs/ref/Querying/overview"},next:{title:"Parameters",permalink:"/docs/ref/Querying/parameters"}},l={},c=[{value:"all",id:"all",level:2},{value:"any",id:"any",level:2},{value:"array",id:"array",level:2},{value:"avg",id:"avg",level:2},{value:"count",id:"count",level:2},{value:"distinct",id:"distinct",level:2},{value:"first",id:"first",level:2},{value:"groupBy",id:"groupby",level:2},{value:"join",id:"join",level:2},{value:"leftJoin",id:"leftjoin",level:2},{value:"limit",id:"limit",level:2},{value:"max",id:"max",level:2},{value:"maybeFirst",id:"maybefirst",level:2},{value:"maybeSingle",id:"maybesingle",level:2},{value:"min",id:"min",level:2},{value:"offset",id:"offset",level:2},{value:"options",id:"options",level:2},{value:"orderBy",id:"orderby",level:2},{value:"orderByDesc",id:"orderbydesc",level:2},{value:"select",id:"select",level:2},{value:"single",id:"single",level:2},{value:"sql",id:"sql",level:2},{value:"sum",id:"sum",level:2},{value:"toArray",id:"toarray",level:2},{value:"where",id:"where",level:2},{value:"with",id:"with",level:2}];function d(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h1,{id:"operators",children:"Operators"}),"\n",(0,r.jsx)(s.p,{children:"Verse provides many query operators to help you write sophisticated queries. This section will describe\nthe built-in operators and how to use them."}),"\n",(0,r.jsx)(s.h2,{id:"all",children:"all"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"all"})," operator is used to check if all of the elements in a sequence satisfy a given condition:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:all showLineNumbers",children:'const all = await db.from.artists.all(a => a.name !== "AC/DC"); // false\n'})}),"\n",(0,r.jsx)(s.h2,{id:"any",children:"any"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"any"})," operator is used to check if a sequence contains any elements:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:any showLineNumbers",children:'let any = await db.from.artists.where(a => a.name === "AC/DC").any(); // true\n'})}),"\n",(0,r.jsx)(s.p,{children:"There is a shorthand for the common case above:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:any-pred showLineNumbers",children:'any = await db.from.artists.any(a => a.name === "AC/DC"); // true\n'})}),"\n",(0,r.jsx)(s.h2,{id:"array",children:"array"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"array"})," operator is an aggregate operator that collects all the elements in a sequence into an array:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:array showLineNumbers",children:"const array = await db.from.artists.array().first(); // true\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Aggregation happens on the database side, usually using a JSON array aggregation function such as ",(0,r.jsx)(s.code,{children:"json_agg"})," in PostgreSQL."]}),"\n",(0,r.jsx)(s.h2,{id:"avg",children:"avg"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"avg"})," operator is an aggregate operator that calculates the average of a sequence of numbers:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:avg showLineNumbers",children:"let avg = await db.from.artists.select(a => a.artistId).avg();\n"})}),"\n",(0,r.jsx)(s.p,{children:"There is a shorthand for the common case above:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:avg-short showLineNumbers",children:"avg = await db.from.artists.avg(a => a.artistId);\n"})}),"\n",(0,r.jsx)(s.h2,{id:"count",children:"count"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"count"})," operator is an aggregate operator that counts the number of elements in a sequence:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:count showLineNumbers",children:"const count = await db.from.artists.count();\n"})}),"\n",(0,r.jsx)(s.h2,{id:"distinct",children:"distinct"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"distinct"})," operator is used to remove duplicate elements from a sequence:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:distinct showLineNumbers",children:"const distinct = await db.from.artists\n  .select(a => a.name)\n  .distinct()\n  .toArray();\n"})}),"\n",(0,r.jsx)(s.h2,{id:"first",children:"first"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"first"})," operator is used to get the first element of a sequence:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:first showLineNumbers",children:'let first = await db.from.artists.where(a => a.name === "AC/DC").first();\n'})}),"\n",(0,r.jsx)(s.p,{children:"There is a shorthand for the common case above:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:first-pred showLineNumbers",children:'first = await db.from.artists.first(a => a.name === "AC/DC");\n'})}),"\n",(0,r.jsx)(s.h2,{id:"groupby",children:"groupBy"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"groupBy"})," operator is used to group elements in a sequence by a key:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:group-by showLineNumbers",children:"const groupBy = await db.from.albums.groupBy(a => a.artistId).toArray();\n"})}),"\n",(0,r.jsx)(s.p,{children:"Each group is represented as a key-value pair where the key is the group key and the value\nis an array of the elements in the group."}),"\n",(0,r.jsx)(s.p,{children:"You can also perform aggregation on the groups:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:group-by-agg showLineNumbers",children:"const albumCounts = await db.from.albums\n  .groupBy(\n    a => a.artistId,\n    g => ({\n      artist: g.key,\n      count: g.count(),\n    })\n  )\n  .toArray();\n"})}),"\n",(0,r.jsx)(s.h2,{id:"join",children:"join"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"join"})," operator is used to join two sequences based on a common key:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:join showLineNumbers",children:"const joined = await db.from.artists\n  .join(db.from.albums, (ar, al) => ar.artistId === al.artistId)\n  .select((ar, al) => ({\n    artist: ar.name,\n    album: al.title,\n  }))\n  .toArray();\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"join"})," returns a sequence of pairs where the first element is from the first sequence and the second\nelement is from the second sequence. Subsequent operators (like the ",(0,r.jsx)(s.code,{children:"select"})," operator above) will\nautomatically destructure the pairs into separate parameters when the operator accepts an arrow function."]}),"\n",(0,r.jsx)(s.h2,{id:"leftjoin",children:"leftJoin"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"leftJoin"})," operator is used to join two sequences based on a common key, returning all elements from the\nfirst sequence, and the matching elements from the second sequence:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:left-join showLineNumbers",children:"const leftJoined = await db.from.artists\n  .leftJoin(db.from.albums, (ar, al) => ar.artistId === al.artistId)\n  .toArray();\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Join returns a sequence of pairs where the first element is from the first sequence and the second\nelement is from the second sequence, or ",(0,r.jsx)(s.code,{children:"undefined"})," if there is no match. As with ",(0,r.jsx)(s.code,{children:"join"}),", subsequent operators will\nautomatically destructure the pairs into separate parameters when the operator accepts an arrow function."]}),"\n",(0,r.jsx)(s.h2,{id:"limit",children:"limit"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"limit"})," operator is used to limit the number of elements in a sequence:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:limit showLineNumbers",children:"const limit = await db.from.artists.limit(5).toArray();\n"})}),"\n",(0,r.jsx)(s.p,{children:"Limit queries are automatically parameterized to improve performance and security."}),"\n",(0,r.jsx)(s.h2,{id:"max",children:"max"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"max"})," operator is an aggregate operator that calculates the maximum of a sequence of numbers:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:max showLineNumbers",children:"let max = await db.from.artists.select(a => a.artistId).max();\n"})}),"\n",(0,r.jsx)(s.p,{children:"There is a shorthand for the common case above:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:max-short showLineNumbers",children:"avg = await db.from.artists.max(a => a.artistId);\n"})}),"\n",(0,r.jsx)(s.h2,{id:"maybefirst",children:"maybeFirst"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"maybeFirst"})," operator is used to get the first element of a sequence, or return ",(0,r.jsx)(s.code,{children:"undefined"})," if the sequence is empty:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:maybe-first showLineNumbers",children:'let maybeFirst = await db.from.artists\n  .where(a => a.name === "Allan Holdsworth")\n  .maybeFirst();\n'})}),"\n",(0,r.jsx)(s.p,{children:"There is a shorthand for the common case above:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:maybe-first-pred showLineNumbers",children:'maybeFirst = await db.from.artists.maybeFirst(\n  a => a.name === "Allan Holdsworth"\n);\n'})}),"\n",(0,r.jsx)(s.h2,{id:"maybesingle",children:"maybeSingle"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"maybeSingle"})," operator is used to get the only element of a sequence, or return ",(0,r.jsx)(s.code,{children:"undefined"})," if the sequence is empty:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:maybe-single showLineNumbers",children:'let maybeSingle = await db.from.artists\n  .where(a => a.name === "Allan Holdsworth")\n  .maybeSingle();\n'})}),"\n",(0,r.jsx)(s.p,{children:"This operator will throw an error if the sequence contains more than one element."}),"\n",(0,r.jsx)(s.p,{children:"There is a shorthand for the common case above:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:maybe-single-pred showLineNumbers",children:'maybeSingle = await db.from.artists.maybeSingle(\n  a => a.name === "Allan Holdsworth"\n);\n'})}),"\n",(0,r.jsx)(s.h2,{id:"min",children:"min"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"min"})," operator is an aggregate operator that calculates the minimum of a sequence of numbers:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:min showLineNumbers",children:"let min = await db.from.artists.select(a => a.artistId).min();\n"})}),"\n",(0,r.jsx)(s.p,{children:"There is a shorthand for the common case above:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:min-short showLineNumbers",children:"avg = await db.from.artists.min(a => a.artistId);\n"})}),"\n",(0,r.jsx)(s.h2,{id:"offset",children:"offset"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"offset"})," operator is used to skip a number of elements in a sequence:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:offset showLineNumbers",children:"const offset = await db.from.artists.offset(5).toArray();\n"})}),"\n",(0,r.jsx)(s.p,{children:"Offset queries are automatically parameterized to improve performance and security."}),"\n",(0,r.jsx)(s.h2,{id:"options",children:"options"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"options"})," operator is used to specify query options:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:options showLineNumbers",children:'const options = await db.from.artists\n  .options({ disabledConditions: "all" })\n  .where(a => a.name === "AC/DC")\n  .toArray();\n'})}),"\n",(0,r.jsx)(s.p,{children:"It may only be used at the beginning of a query."}),"\n",(0,r.jsx)(s.h2,{id:"orderby",children:"orderBy"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"orderBy"})," operator is used to sort elements in a sequence:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:order-by showLineNumbers",children:"const ordered = await db.from.artists.orderBy(a => a.name).toArray();\n"})}),"\n",(0,r.jsx)(s.h2,{id:"orderbydesc",children:"orderByDesc"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"orderByDesc"})," operator is used to sort elements in a sequence in descending order:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:order-by-desc showLineNumbers",children:"const orderedDesc = await db.from.artists.orderByDesc(a => a.name).toArray();\n"})}),"\n",(0,r.jsx)(s.h2,{id:"select",children:"select"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"select"})," operator is used to project elements in a sequence:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:select showLineNumbers",children:"const select = await db.from.artists.select(a => a.name).toArray();\n"})}),"\n",(0,r.jsx)(s.p,{children:"Complex projections are supported:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:select-complex showLineNumbers",children:"const selectComplex = await db.from.albums\n  .select(a => ({\n    id: a.albumId,\n    desc: `Title: ${a.title}`,\n    props: [a.artistId],\n  }))\n  .toArray();\n"})}),"\n",(0,r.jsx)(s.p,{children:"Verse will push down projection expressions to the database when possible (such as the template literal above).\nThe example above will be translated to SQL as:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-sql",metastring:"showLineNumbers",children:'select "t1"."AlbumId", \'Title: \' || "t1"."Title" as "c0", "t1"."ArtistId"\nfrom "Album" as "t1"\n'})}),"\n",(0,r.jsx)(s.p,{children:"The rest of the required projection processing (i.e creating each result object) will be performed on the client side."}),"\n",(0,r.jsx)(s.h2,{id:"single",children:"single"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"single"})," operator is used to get the only element of a sequence:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:single showLineNumbers",children:'let single = await db.from.artists.where(a => a.name === "AC/DC").single();\n'})}),"\n",(0,r.jsx)(s.p,{children:"Single will throw if there are no elements in the sequence, or if there is more than one element."}),"\n",(0,r.jsx)(s.p,{children:"There is a shorthand for the common case above:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:single-pred showLineNumbers",children:'single = await db.from.artists.single(a => a.name === "AC/DC");\n'})}),"\n",(0,r.jsx)(s.h2,{id:"sql",children:"sql"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"sql"})," operator is used to execute a raw SQL query:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:sql showLineNumbers",children:'const name = "AC/DC"; // usually from user input, parameterized\n\nconst sql = await db.from.artists\n  .sql`SELECT * FROM Artist WHERE Name = ${name}`.toArray();\n'})}),"\n",(0,r.jsx)(s.p,{children:"It is a useful escape hatch for when you need to execute a query that is not supported by the Verse query API."}),"\n",(0,r.jsx)(s.h2,{id:"sum",children:"sum"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"sum"})," operator is an aggregate operator that calculates the sum of a sequence of numbers:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:sum showLineNumbers",children:"let sum = await db.from.artists.select(a => a.artistId).sum();\n"})}),"\n",(0,r.jsx)(s.p,{children:"There is a shorthand for the common case above:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:sum-short showLineNumbers",children:"sum = await db.from.artists.sum(a => a.artistId);\n"})}),"\n",(0,r.jsx)(s.h2,{id:"toarray",children:"toArray"}),"\n",(0,r.jsx)(s.p,{children:"Buffers the sequence into an array:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:to-array showLineNumbers",children:"const toArray = await db.from.artists.toArray();\n"})}),"\n",(0,r.jsxs)(s.p,{children:["By default, sequences are lazy and will not execute until the query is iterated, or a terminal operator like ",(0,r.jsx)(s.code,{children:"toArray"})," is called."]}),"\n",(0,r.jsx)(s.h2,{id:"where",children:"where"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"where"})," operator is used to filter elements in a sequence:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:where showLineNumbers",children:'const where = await db.from.artists.where(a => a.name === "AC/DC").toArray();\n'})}),"\n",(0,r.jsx)(s.h2,{id:"with",children:"with"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"with"})," operator is used to specify one or more navigation properties that should be eager loaded:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:with showLineNumbers",children:"let eager = db.from.artists.limit(1).with(a => a.albums);\n\nfor await (const artist of eager) {\n  console.log(artist);\n}\n"})}),"\n",(0,r.jsxs)(s.p,{children:["See the ",(0,r.jsx)(s.a,{href:"./eager-loading",children:"Eager Loading"})," section for more information."]})]})}function h(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8740:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>o});var r=n(1855);const a={},t=r.createContext(a);function i(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);