"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8700],{8879:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>d,metadata:()=>o,toc:()=>c});var n=t(5723),s=t(3327);const d={title:"Converter"},i="Type Alias: Converter()<T, S>",o={id:"api/model/builder/type-aliases/Converter",title:"Converter",description:"Converter\\ T) => S",source:"@site/docs/api/model/builder/type-aliases/Converter.md",sourceDirName:"api/model/builder/type-aliases",slug:"/api/model/builder/type-aliases/Converter",permalink:"/docs/api/model/builder/type-aliases/Converter",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Converter"},sidebar:"apiSidebar",previous:{title:"ConversionOptions",permalink:"/docs/api/model/builder/type-aliases/ConversionOptions"},next:{title:"ForeignKeyOptions",permalink:"/docs/api/model/builder/type-aliases/ForeignKeyOptions"}},l={},c=[{value:"Type Parameters",id:"type-parameters",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Defined in",id:"defined-in",level:2}];function a(e){const r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"type-alias-convertert-s",children:"Type Alias: Converter()<T, S>"}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.strong,{children:"Converter"}),"<",(0,n.jsx)(r.code,{children:"T"}),", ",(0,n.jsx)(r.code,{children:"S"}),">: (",(0,n.jsx)(r.code,{children:"value"}),": ",(0,n.jsx)(r.code,{children:"T"}),") => ",(0,n.jsx)(r.code,{children:"S"})]}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:"Converters are functions that transform values from one type to another when reading from or\nwriting to the database."}),"\n",(0,n.jsx)(r.h2,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Type Parameter"}),(0,n.jsx)(r.th,{children:"Default type"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"T"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"any"})}),(0,n.jsx)(r.td,{children:"The input type of the converter"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"S"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"any"})}),(0,n.jsx)(r.td,{children:"The output type of the converter"})]})]})]}),"\n",(0,n.jsx)(r.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Parameter"}),(0,n.jsx)(r.th,{children:"Type"})]})}),(0,n.jsx)(r.tbody,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"value"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"T"})})]})})]}),"\n",(0,n.jsx)(r.h2,{id:"returns",children:"Returns"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.code,{children:"S"})}),"\n",(0,n.jsx)(r.h2,{id:"defined-in",children:"Defined in"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.a,{href:"https://github.com/operativa-dev/verse/blob/afd181c927e47fdeff512ae41818fb33ecad359a/packages/verse-core/src/model/builder.ts#L588",children:"packages/verse-core/src/model/builder.ts:588"})})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},3327:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>o});var n=t(2155);const s={},d=n.createContext(s);function i(e){const r=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(d.Provider,{value:r},e.children)}}}]);