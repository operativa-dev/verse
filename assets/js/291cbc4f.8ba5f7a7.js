"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[699],{1465:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var i=n(3159),o=n(8740);const r={},a="Overview",s={id:"ref/Configuration/Conventions/overview",title:"Overview",description:'Verse employs the concept of "convention over configuration" to reduce the amount of boilerplate configuration that needs',source:"@site/docs/ref/02-Configuration/03-Conventions/01-overview.mdx",sourceDirName:"ref/02-Configuration/03-Conventions",slug:"/ref/Configuration/Conventions/overview",permalink:"/docs/ref/Configuration/Conventions/overview",draft:!1,unlisted:!1,editUrl:"https://github.com/operativa-dev/verse/edit/main/apps/docs",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"refSidebar",previous:{title:"Entities",permalink:"/docs/ref/Configuration/entities"},next:{title:"Customizing",permalink:"/docs/ref/Configuration/Conventions/customizing"}},l={},d=[{value:"BooleansToOneOrZero",id:"booleanstooneorzero",level:2},{value:"ColumnFromPascalCasedPropertyName",id:"columnfrompascalcasedpropertyname",level:2},{value:"ColumnTypeFromProperties",id:"columntypefromproperties",level:2},{value:"DateAsTimestamp",id:"dateastimestamp",level:2},{value:"DateAsTimestampWithTimeZone",id:"dateastimestampwithtimezone",level:2},{value:"DatePropertyToISOString",id:"datepropertytoisostring",level:2},{value:"DefaultSequence",id:"defaultsequence",level:2},{value:"EntityNameFromLabel",id:"entitynamefromlabel",level:2},{value:"ForeignKeyFromEntityNameAndPrimaryKeyName",id:"foreignkeyfromentitynameandprimarykeyname",level:2},{value:"ForeignKeyFromPrimaryKeyName",id:"foreignkeyfromprimarykeyname",level:2},{value:"ForeignKeyOnDelete",id:"foreignkeyondelete",level:2},{value:"IdentityKey",id:"identitykey",level:2},{value:"MaxLengthDefault",id:"maxlengthdefault",level:2},{value:"NavigationForeignKeyFromDependent",id:"navigationforeignkeyfromdependent",level:2},{value:"PrecisionScaleDefaults",id:"precisionscaledefaults",level:2},{value:"PrimaryKeyFromProperty",id:"primarykeyfromproperty",level:2},{value:"PropertiesAreNotNullable",id:"propertiesarenotnullable",level:2},{value:"SeqHiloKey",id:"seqhilokey",level:2},{value:"TableFromEntityName",id:"tablefromentityname",level:2},{value:"UseSingleTableInheritance",id:"usesingletableinheritance",level:2},{value:"UuidPropertyToBuffer",id:"uuidpropertytobuffer",level:2},{value:"VersionProperty",id:"versionproperty",level:2}];function h(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(t.p,{children:'Verse employs the concept of "convention over configuration" to reduce the amount of boilerplate configuration that needs\nto be written. This means that the framework makes assumptions about how your application is structured, and provides\nsensible defaults for these assumptions. This allows you to focus on writing the code that is unique to your application,\nrather than spending time on boilerplate code.'}),"\n",(0,i.jsx)(t.p,{children:"The conventions that Verse uses are as follows:"}),"\n",(0,i.jsx)(t.h2,{id:"booleanstooneorzero",children:"BooleansToOneOrZero"}),"\n",(0,i.jsx)(t.p,{children:"When a boolean property is defined on an entity, it is assumed that this property is mapped\nto a column in the database that will represent this boolean as a 1 or 0. This convention is\nused when the target database does not directly support a boolean type."}),"\n",(0,i.jsx)(t.h2,{id:"columnfrompascalcasedpropertyname",children:"ColumnFromPascalCasedPropertyName"}),"\n",(0,i.jsxs)(t.p,{children:["When a property is defined on an entity, the column name that this property is mapped to in the database\nis assumed to be the pascal-cased version of the property name. For example, a property named ",(0,i.jsx)(t.code,{children:"firstName"}),"\nwill be mapped to a column named ",(0,i.jsx)(t.code,{children:"FirstName"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"columntypefromproperties",children:"ColumnTypeFromProperties"}),"\n",(0,i.jsxs)(t.p,{children:["The type of the column in the database is inferred from the values of various properties on the entity. For example,\nif a property is of type ",(0,i.jsx)(t.code,{children:"string"})," and has a ",(0,i.jsx)(t.code,{children:"maxLength"})," attribute with a value of 50, then the column in the database\nwill be of type ",(0,i.jsx)(t.code,{children:"VARCHAR(50)"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"dateastimestamp",children:"DateAsTimestamp"}),"\n",(0,i.jsxs)(t.p,{children:["When a property is of type ",(0,i.jsx)(t.code,{children:"Date"}),", it is assumed that this property is mapped to a column in the database that\nwill represent this date as a ",(0,i.jsx)(t.code,{children:"timestamp"}),". This convention is used when the target database does not directly support\na date type."]}),"\n",(0,i.jsx)(t.h2,{id:"dateastimestampwithtimezone",children:"DateAsTimestampWithTimeZone"}),"\n",(0,i.jsxs)(t.p,{children:["When a property is of type ",(0,i.jsx)(t.code,{children:"Date"}),", it is assumed that this property is mapped to a column in the database that\nwill represent this date as a ",(0,i.jsx)(t.code,{children:"timestamp with time zone"}),". This convention is used instead of ",(0,i.jsx)(t.code,{children:"DateAsTimestamp"})," when\nthe target database supports timezones."]}),"\n",(0,i.jsx)(t.h2,{id:"datepropertytoisostring",children:"DatePropertyToISOString"}),"\n",(0,i.jsxs)(t.p,{children:["When a property is of type ",(0,i.jsx)(t.code,{children:"Date"}),", it is assumed that this property should be serialized to and deserialized from\na string in the format ",(0,i.jsx)(t.code,{children:"YYYY-MM-DDTHH:mm:ss.sssZ"}),". This is the format that is used by the ",(0,i.jsx)(t.code,{children:"Date"})," object's ",(0,i.jsx)(t.code,{children:"toISOString"}),"\nmethod. This convention is used when that target database does not directly support a date type."]}),"\n",(0,i.jsx)(t.h2,{id:"defaultsequence",children:"DefaultSequence"}),"\n",(0,i.jsx)(t.p,{children:'For databases that support sequences, properties can be configured to use a sequence as the default value via\nVerse\'s built-in support for the hi-lo pattern ("seqhilo"). This convention creates the database sequence that\nwill be used by default.'}),"\n",(0,i.jsx)(t.h2,{id:"entitynamefromlabel",children:"EntityNameFromLabel"}),"\n",(0,i.jsx)(t.p,{children:"Sets the default entity name for an object-based entity to be the singularized, pascal-cased label of the entity."}),"\n",(0,i.jsx)(t.h2,{id:"foreignkeyfromentitynameandprimarykeyname",children:"ForeignKeyFromEntityNameAndPrimaryKeyName"}),"\n",(0,i.jsxs)(t.p,{children:["When two entities have a relationship, the foreign key column in the database is assumed to be named after the\nname of the entity that the foreign key references, followed by the name of the primary key column on that entity.\nE.g. if an entity named ",(0,i.jsx)(t.code,{children:"Album"})," has a relationship to an entity named ",(0,i.jsx)(t.code,{children:"Artist"}),", and the primary key of ",(0,i.jsx)(t.code,{children:"Artist"}),"\nis ",(0,i.jsx)(t.code,{children:"id"}),", then the foreign key column on the ",(0,i.jsx)(t.code,{children:"Album"})," table will be named ",(0,i.jsx)(t.code,{children:"ArtistId"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"foreignkeyfromprimarykeyname",children:"ForeignKeyFromPrimaryKeyName"}),"\n",(0,i.jsxs)(t.p,{children:["When two entities have a relationship, the foreign key column in the database is assumed to be named after the\nname of the primary key column on the entity that the foreign key references. E.g. if an entity named ",(0,i.jsx)(t.code,{children:"Album"}),"\nhas a relationship to an entity named ",(0,i.jsx)(t.code,{children:"Artist"}),", and the primary key of ",(0,i.jsx)(t.code,{children:"Artist"})," is ",(0,i.jsx)(t.code,{children:"albumId"}),", then the foreign key\ncolumn on the ",(0,i.jsx)(t.code,{children:"Album"})," table will be named ",(0,i.jsx)(t.code,{children:"albumId"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"foreignkeyondelete",children:"ForeignKeyOnDelete"}),"\n",(0,i.jsxs)(t.p,{children:["Sets the default behavior for the ",(0,i.jsx)(t.code,{children:"ON DELETE"})," clause of foreign key constraints. If any property of the foreign key\nis required, the ",(0,i.jsx)(t.code,{children:"ON DELETE"})," clause will be set to ",(0,i.jsx)(t.code,{children:"CASCADE"}),". Otherwise, it will be set to ",(0,i.jsx)(t.code,{children:"SET NULL"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"identitykey",children:"IdentityKey"}),"\n",(0,i.jsx)(t.p,{children:'Sets the default identity generation strategy for a single, numeric key column to "identity". This convention is used\nwhen the target database supports identity columns.'}),"\n",(0,i.jsx)(t.h2,{id:"maxlengthdefault",children:"MaxLengthDefault"}),"\n",(0,i.jsx)(t.p,{children:"Sets the default maximum length for a string property to 255, or 36 if the string property is being used to\nstore a UUID."}),"\n",(0,i.jsx)(t.h2,{id:"navigationforeignkeyfromdependent",children:"NavigationForeignKeyFromDependent"}),"\n",(0,i.jsx)(t.p,{children:"Configures the foreign key used by navigation properties between entities. If there is a single foreign key set up\nbetween the two entities, set it as the foreign key for the navigation properties."}),"\n",(0,i.jsx)(t.h2,{id:"precisionscaledefaults",children:"PrecisionScaleDefaults"}),"\n",(0,i.jsx)(t.p,{children:"Sets the default precision and scale for numeric (non-integer) properties to 18 and 4, respectively."}),"\n",(0,i.jsx)(t.h2,{id:"primarykeyfromproperty",children:"PrimaryKeyFromProperty"}),"\n",(0,i.jsxs)(t.p,{children:["Tries to discover the primary key property of an entity by looking for a property named ",(0,i.jsx)(t.code,{children:"id"})," or ",(0,i.jsx)(t.code,{children:"<entityName>Id"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"propertiesarenotnullable",children:"PropertiesAreNotNullable"}),"\n",(0,i.jsx)(t.p,{children:"Makes all properties on an entity not nullable by default."}),"\n",(0,i.jsx)(t.h2,{id:"seqhilokey",children:"SeqHiloKey"}),"\n",(0,i.jsxs)(t.p,{children:["Sets the default identity generation strategy for a single, numeric key column to ",(0,i.jsx)(t.code,{children:"seqhilo"}),". This convention is used\nwhen the target database supports sequences. Depends on the ",(0,i.jsx)(t.code,{children:"DefaultSequence"})," convention to create the sequence."]}),"\n",(0,i.jsx)(t.h2,{id:"tablefromentityname",children:"TableFromEntityName"}),"\n",(0,i.jsx)(t.p,{children:"Sets the default table name for an entity to be entity name."}),"\n",(0,i.jsx)(t.h2,{id:"usesingletableinheritance",children:"UseSingleTableInheritance"}),"\n",(0,i.jsx)(t.p,{children:'Sets the default inheritance strategy to "single table inheritance". Entity inheritance hierarchies are mapped\nto a single table in the database, with a discriminator column to differentiate between the different types of entities.'}),"\n",(0,i.jsx)(t.h2,{id:"uuidpropertytobuffer",children:"UuidPropertyToBuffer"}),"\n",(0,i.jsxs)(t.p,{children:["When a property's configure column type is ",(0,i.jsx)(t.code,{children:"uuid"}),", it is assumed that this property should be serialized\nto and deserialized from a ",(0,i.jsx)(t.code,{children:"Buffer"}),". This convention is used when the target database does not directly\nsupport a UUID type, but is instead using a ",(0,i.jsx)(t.code,{children:"BINARY(16)"})," column to store the UUID."]}),"\n",(0,i.jsx)(t.h2,{id:"versionproperty",children:"VersionProperty"}),"\n",(0,i.jsxs)(t.p,{children:["Looks for an integer property named ",(0,i.jsx)(t.code,{children:"version"})," on an entity and sets it as the version property for\noptimistic concurrency."]})]})}function c(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8740:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var i=n(1855);const o={},r=i.createContext(o);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);