"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9412],{7524:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var s=n(5723),i=n(3327);const r={title:"EntityType"},d="Type Alias: EntityType<Model>",o={id:"api/verse/type-aliases/EntityType",title:"EntityType",description:"EntityType\\ never",source:"@site/docs/api/verse/type-aliases/EntityType.md",sourceDirName:"api/verse/type-aliases",slug:"/api/verse/type-aliases/EntityType",permalink:"/docs/api/verse/type-aliases/EntityType",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"EntityType"},sidebar:"apiSidebar",previous:{title:"EntitySets",permalink:"/docs/api/verse/type-aliases/EntitySets"},next:{title:"From",permalink:"/docs/api/verse/type-aliases/From"}},a={},l=[{value:"Type Parameters",id:"type-parameters",level:2},{value:"Example",id:"example",level:2},{value:"Defined in",id:"defined-in",level:2}];function c(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"type-alias-entitytypemodel",children:"Type Alias: EntityType<Model>"}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"EntityType"}),"<",(0,s.jsx)(t.code,{children:"Model"}),">: ",(0,s.jsx)(t.code,{children:"Model"})," ",(0,s.jsx)(t.em,{children:"extends"})," ",(0,s.jsx)(t.a,{href:"/docs/api/model/model/classes/EntityModel",children:(0,s.jsx)(t.code,{children:"EntityModel"})}),"<infer Properties> ? ",(0,s.jsx)(t.a,{href:"/docs/api/model/builder/type-aliases/UnwrapProperties",children:(0,s.jsx)(t.code,{children:"UnwrapProperties"})}),"<",(0,s.jsx)(t.code,{children:"Properties"}),"> : ",(0,s.jsx)(t.code,{children:"never"})]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["A type that can infer an entity type from an ",(0,s.jsx)(t.a,{href:"/docs/api/model/model/classes/EntityModel",children:"EntityModel"})," when used in conjunction with\nthe ",(0,s.jsx)(t.em,{children:"typeof"})," operator."]}),"\n",(0,s.jsx)(t.h2,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.th,{children:"Type Parameter"})})}),(0,s.jsx)(t.tbody,{children:(0,s.jsx)(t.tr,{children:(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"Model"})," ",(0,s.jsx)(t.em,{children:"extends"})," ",(0,s.jsx)(t.a,{href:"/docs/api/model/model/classes/EntityModel",children:(0,s.jsx)(t.code,{children:"EntityModel"})})]})})})]}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"showLineNumbers",children:"const db = verse({\n  config: // ...\n  model: {\n    entities: {\n      customers: entity(\n        // ...\n      )\n    },\n  },\n});\n\ntype Customer = EntityType<typeof db.entities.customers>;\n"})}),"\n",(0,s.jsx)(t.h2,{id:"defined-in",children:"Defined in"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://github.com/operativa-dev/verse/blob/afd181c927e47fdeff512ae41818fb33ecad359a/packages/verse-core/src/verse.ts#L124",children:"packages/verse-core/src/verse.ts:124"})})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},3327:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>o});var s=n(2155);const i={},r=s.createContext(i);function d(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);