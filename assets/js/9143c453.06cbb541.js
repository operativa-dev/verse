"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6471],{5531:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var a=n(5723),s=n(3327);const r={},i="Navigations",o={id:"ref/Querying/navigations",title:"Navigations",description:"Navigation properties may be used to easily construct queries that span entity relationships, avoiding",source:"@site/docs/ref/03-Querying/06-navigations.mdx",sourceDirName:"ref/03-Querying",slug:"/ref/Querying/navigations",permalink:"/docs/ref/Querying/navigations",draft:!1,unlisted:!1,editUrl:"https://github.com/operativa-dev/verse/edit/main/apps/docs/docs/ref",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"refSidebar",previous:{title:"Raw SQL",permalink:"/docs/ref/Querying/raw-sql"},next:{title:"Introduction",permalink:"/docs/ref/Updating/intro"}},c={},l=[];function d(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"navigations",children:"Navigations"}),"\n",(0,a.jsx)(t.p,{children:"Navigation properties may be used to easily construct queries that span entity relationships, avoiding\nthe need to manually join entities based on foreign keys relationships. This a powerful feature that allows you to\nwork with your data in a more natural way."}),"\n",(0,a.jsx)(t.p,{children:"For example, we can query artists that have at least one album."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:navigation showLineNumbers",children:"const navigation = await db.from.artists\n  .where(a => a.albums.length > 1)\n  .toArray();\n"})}),"\n",(0,a.jsxs)(t.p,{children:["In this example, the ",(0,a.jsx)(t.code,{children:"albums"})," property is a navigation property that allows us to query albums related to an artist,\nVerse understands the ",(0,a.jsx)(t.code,{children:"length"})," property and generates the appropriate SQL query."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sql",metastring:"showLineNumbers",children:'select "t1"."ArtistId", "t1"."Name"\nfrom "Artist" as "t1"\nwhere (\n   select count(*)\n   from "Album" as "t2"\n   where "t1"."ArtistId" = "t2"."ArtistId"\n) > 1\n'})}),"\n",(0,a.jsx)(t.p,{children:'What if we want to query the names of any artists that have a track called "Today"?'}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:navigation-2 showLineNumbers",children:'const navigation2 = await db.from.tracks\n  .where(t => t.name === "Today")\n  .select(t => t.album.artist.name)\n  .toArray();\n'})}),"\n",(0,a.jsx)(t.p,{children:"Navigations work anywhere you have a reference to an entity, so you can even do things like this:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",metastring:"include ./apps/snippets/src/query.ts:navigation-3 showLineNumbers",children:'const navigation3 = await db.from.albums\n  .select(a => ({ foo: { bar: a }, baz: a }))\n  .where(o => o.foo.bar.artist.name === "Alice In Chains")\n  .toArray();\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Here, even though we are putting each album into the ",(0,a.jsx)(t.code,{children:"foo.bar"})," property of an intermediate object, we are still able to\nnavigate to the related artist and filter on their name."]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},3327:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var a=n(2155);const s={},r=a.createContext(s);function i(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);